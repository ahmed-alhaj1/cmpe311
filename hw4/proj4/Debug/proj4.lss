
proj4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002e8  008002e8  00000f5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169b  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d78  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8a  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000729  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca7  00000000  00000000  00004ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	12 e0       	ldi	r17, 0x02	; 2
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 ee       	ldi	r30, 0xE2	; 226
  70:	fc e0       	ldi	r31, 0x0C	; 12
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 3e       	cpi	r26, 0xE8	; 232
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	22 e0       	ldi	r18, 0x02	; 2
  80:	a8 ee       	ldi	r26, 0xE8	; 232
  82:	b2 e0       	ldi	r27, 0x02	; 2
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 3f       	cpi	r26, 0xF0	; 240
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 38 02 	call	0x470	; 0x470 <main>
  92:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_WriteDigit>:
	char mask, nibble;
	char *ptr;
	char i;


	if (digit > 5)                              // Skip if digit is illegal
  9a:	66 30       	cpi	r22, 0x06	; 6
  9c:	b0 f5       	brcc	.+108    	; 0x10a <LCD_WriteDigit+0x70>
	return;

	//Lookup character table for segmet data
	if ((c >= '*') && (c <= 'z'))
  9e:	96 ed       	ldi	r25, 0xD6	; 214
  a0:	98 0f       	add	r25, r24
  a2:	91 35       	cpi	r25, 0x51	; 81
  a4:	68 f4       	brcc	.+26     	; 0xc0 <LCD_WriteDigit+0x26>
	{
		// c is a letter
		if (c >= 'a')                           // Convert to upper case
  a6:	81 36       	cpi	r24, 0x61	; 97
  a8:	08 f0       	brcs	.+2      	; 0xac <LCD_WriteDigit+0x12>
		c &= ~0x20;                         // if necessarry
  aa:	8f 7d       	andi	r24, 0xDF	; 223

		c -= '*';

		seg = LCD_character_table[c];
  ac:	8a 52       	subi	r24, 0x2A	; 42
  ae:	e8 2f       	mov	r30, r24
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	e0 50       	subi	r30, 0x00	; 0
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	20 81       	ld	r18, Z
  bc:	31 81       	ldd	r19, Z+1	; 0x01
  be:	02 c0       	rjmp	.+4      	; 0xc4 <LCD_WriteDigit+0x2a>
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{

	unsigned int seg = 0x0000;                  // Holds the segment pattern
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0

		seg = LCD_character_table[c];
	}

	// Adjust mask according to LCD segment mapping
	if (digit & 0x01)
  c4:	a6 2f       	mov	r26, r22
  c6:	a1 70       	andi	r26, 0x01	; 1
  c8:	60 fd       	sbrc	r22, 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <LCD_WriteDigit+0x36>
	mask = 0x0F;                // Digit 1, 3, 5
	else
	mask = 0xF0;                // Digit 0, 2, 4
  cc:	70 ef       	ldi	r23, 0xF0	; 240
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <LCD_WriteDigit+0x38>
		seg = LCD_character_table[c];
	}

	// Adjust mask according to LCD segment mapping
	if (digit & 0x01)
	mask = 0x0F;                // Digit 1, 3, 5
  d0:	7f e0       	ldi	r23, 0x0F	; 15
	else
	mask = 0xF0;                // Digit 0, 2, 4

	//ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
	ptr = pLCDREG + (digit >> 1);  // digit = {0,0,1,1,2,2}
  d2:	66 95       	lsr	r22
  d4:	e6 2f       	mov	r30, r22
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e4 51       	subi	r30, 0x14	; 20
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	af 01       	movw	r20, r30
  de:	4c 5e       	subi	r20, 0xEC	; 236
  e0:	5f 4f       	sbci	r21, 0xFF	; 255

	for (i = 0; i < 4; i++)
	{
		nibble = seg & 0x000F;
  e2:	82 2f       	mov	r24, r18
  e4:	8f 70       	andi	r24, 0x0F	; 15
		seg >>= 4;
  e6:	32 95       	swap	r19
  e8:	22 95       	swap	r18
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	23 27       	eor	r18, r19
  ee:	3f 70       	andi	r19, 0x0F	; 15
  f0:	23 27       	eor	r18, r19
		if (digit & 0x01)
  f2:	aa 23       	and	r26, r26
  f4:	11 f0       	breq	.+4      	; 0xfa <LCD_WriteDigit+0x60>
		nibble <<= 4;
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
		*ptr = (*ptr & mask) | nibble;
  fa:	90 81       	ld	r25, Z
  fc:	97 23       	and	r25, r23
  fe:	89 2b       	or	r24, r25
 100:	80 83       	st	Z, r24
		ptr += 5;
 102:	35 96       	adiw	r30, 0x05	; 5
	mask = 0xF0;                // Digit 0, 2, 4

	//ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
	ptr = pLCDREG + (digit >> 1);  // digit = {0,0,1,1,2,2}

	for (i = 0; i < 4; i++)
 104:	4e 17       	cp	r20, r30
 106:	5f 07       	cpc	r21, r31
 108:	61 f7       	brne	.-40     	; 0xe2 <LCD_WriteDigit+0x48>
 10a:	08 95       	ret

0000010c <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
	unsigned char i;

	if (show)
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	81 11       	cpse	r24, r1
 110:	01 c0       	rjmp	.+2      	; 0x114 <LCD_AllSegments+0x8>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	89 2f       	mov	r24, r25
 116:	81 95       	neg	r24
 118:	ec ee       	ldi	r30, 0xEC	; 236
 11a:	f0 e0       	ldi	r31, 0x00	; 0
	show = 0xFF;

	// Set/clear all bits in all LCD registers
	for (i=0; i < LCD_REGISTER_COUNT; i++)
	*(pLCDREG + i) = show;
 11c:	81 93       	st	Z+, r24

	if (show)
	show = 0xFF;

	// Set/clear all bits in all LCD registers
	for (i=0; i < LCD_REGISTER_COUNT; i++)
 11e:	e1 15       	cp	r30, r1
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	f9 07       	cpc	r31, r25
 124:	d9 f7       	brne	.-10     	; 0x11c <LCD_AllSegments+0x10>
	*(pLCDREG + i) = show;
 126:	08 95       	ret

00000128 <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
	LCD_AllSegments(FALSE);                     // Clear segment buffer.
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_AllSegments>

	LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 12e:	e7 ee       	ldi	r30, 0xE7	; 231
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8f 60       	ori	r24, 0x0F	; 15
 136:	80 83       	st	Z, r24

	// Select asynchronous clock source, enable all COM pins and enable all
	// segment pins.
	LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 138:	87 eb       	ldi	r24, 0xB7	; 183
 13a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Set LCD prescaler to give a framerate of 32,0 Hz
	LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//LCDCRA |= (1<<LCDIE);  // fixed--don't need this

	//updated 2006-10-10, setting LCD drive time to 1150us in FW rev 07,
	//instead of previous 300us in FW rev 06. Due to some variations on the LCD
	//glass provided to the AVR Butterfly production.
	LCDCCR |= (1<<LCDDC2) | (1<<LCDDC1) | (1<<LCDDC0);
 14a:	80 81       	ld	r24, Z
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <__vector_3>:
}
uint8_t press_right() {

    return (PORTE & 0b00001000);

}
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	1c 99       	sbic	0x03, 4	; 3
 162:	08 c0       	rjmp	.+16     	; 0x174 <__vector_3+0x22>
 164:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <pinBPrev.2421>
 168:	84 ff       	sbrs	r24, 4
 16a:	04 c0       	rjmp	.+8      	; 0x174 <__vector_3+0x22>
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 27       	eor	r24, r25
 172:	85 b9       	out	0x05, r24	; 5
 174:	83 b1       	in	r24, 0x03	; 3
 176:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <pinBPrev.2421>
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <lcd_puts>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	69 f0       	breq	.+26     	; 0x1b0 <lcd_puts+0x28>
 196:	8f 01       	movw	r16, r30
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	6c 2f       	mov	r22, r28
 1a0:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_WriteDigit>
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 91       	ld	r24, Z+
 1a8:	8f 01       	movw	r16, r30
 1aa:	cf 5f       	subi	r28, 0xFF	; 255
 1ac:	81 11       	cpse	r24, r1
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <lcd_puts+0x16>
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <move_servo>:
 1b8:	97 b5       	in	r25, 0x27	; 39
 1ba:	89 0f       	add	r24, r25
 1bc:	87 bd       	out	0x27, r24	; 39
 1be:	08 95       	ret

000001c0 <interrupts_init>:
 1c0:	ec e6       	ldi	r30, 0x6C	; 108
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	80 83       	st	Z, r24
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	8d bb       	out	0x1d, r24	; 29
 1ce:	08 95       	ret

000001d0 <joy_init>:
 1d0:	84 b1       	in	r24, 0x04	; 4
 1d2:	8f 73       	andi	r24, 0x3F	; 63
 1d4:	84 b9       	out	0x04, r24	; 4
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 6c       	ori	r24, 0xC0	; 192
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	8d b1       	in	r24, 0x0d	; 13
 1de:	83 7f       	andi	r24, 0xF3	; 243
 1e0:	8d b9       	out	0x0d, r24	; 13
 1e2:	8e b1       	in	r24, 0x0e	; 14
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	8e b9       	out	0x0e, r24	; 14
 1e8:	08 95       	ret

000001ea <servo_init>:
 1ea:	24 9a       	sbi	0x04, 4	; 4
 1ec:	08 95       	ret

000001ee <pins_init>:
 1ee:	84 b1       	in	r24, 0x04	; 4
 1f0:	8f 71       	andi	r24, 0x1F	; 31
 1f2:	84 b9       	out	0x04, r24	; 4
 1f4:	6b 98       	cbi	0x0d, 3	; 13
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	80 6e       	ori	r24, 0xE0	; 224
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	73 9a       	sbi	0x0e, 3	; 14
 1fe:	20 9a       	sbi	0x04, 0	; 4
 200:	21 9a       	sbi	0x04, 1	; 4
 202:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <interrupts_init>
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <ADCStartConversion>:
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <ADCClearConversionFlag>:
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <ADCIsConversionCompleteFlagSet>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	8b e7       	ldi	r24, 0x7B	; 123
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 77 03 	call	0x6ee	; 0x6ee <puts>
 22e:	ca e7       	ldi	r28, 0x7A	; 122
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	88 81       	ld	r24, Y
 234:	80 71       	andi	r24, 0x10	; 16
 236:	1f 92       	push	r1
 238:	8f 93       	push	r24
 23a:	89 e9       	ldi	r24, 0x99	; 153
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	9f 93       	push	r25
 240:	8f 93       	push	r24
 242:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 246:	88 81       	ld	r24, Y
 248:	80 71       	andi	r24, 0x10	; 16
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <adc_acquire>:
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	83 ea       	ldi	r24, 0xA3	; 163
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 77 03 	call	0x6ee	; 0x6ee <puts>
 266:	0e 94 0b 01 	call	0x216	; 0x216 <ADCClearConversionFlag>
 26a:	0e 94 05 01 	call	0x20a	; 0x20a <ADCStartConversion>
 26e:	0e 94 11 01 	call	0x222	; 0x222 <ADCIsConversionCompleteFlagSet>
 272:	89 2b       	or	r24, r25
 274:	e1 f7       	brne	.-8      	; 0x26e <adc_acquire+0x14>
 276:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27a:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	89 eb       	ldi	r24, 0xB9	; 185
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	9f 93       	push	r25
 288:	8f 93       	push	r24
 28a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	8c 2f       	mov	r24, r28
 298:	9d 2f       	mov	r25, r29
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <timer0_init>:
 2a0:	84 e6       	ldi	r24, 0x64	; 100
 2a2:	84 bd       	out	0x24, r24	; 36
 2a4:	16 bc       	out	0x26, r1	; 38
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	87 bd       	out	0x27, r24	; 39
 2aa:	08 95       	ret

000002ac <JoyGet>:
 2ac:	83 b1       	in	r24, 0x03	; 3
 2ae:	9c b1       	in	r25, 0x0c	; 12
 2b0:	90 95       	com	r25
 2b2:	9c 70       	andi	r25, 0x0C	; 12
 2b4:	80 95       	com	r24
 2b6:	80 7c       	andi	r24, 0xC0	; 192
 2b8:	89 2b       	or	r24, r25
 2ba:	08 95       	ret

000002bc <max3>:


/*
 * Returns the maximum of 3 integers
 */
uint8_t max3(uint8_t a, uint8_t b, uint8_t c) {
 2bc:	64 17       	cp	r22, r20
 2be:	08 f4       	brcc	.+2      	; 0x2c2 <max3+0x6>
 2c0:	64 2f       	mov	r22, r20

    // simple boolean expressions for fast comparison
    (void) ((m < b) && (m = b));
    (void) ((m < c) && (m = c));

    return m;
 2c2:	68 17       	cp	r22, r24
 2c4:	08 f4       	brcc	.+2      	; 0x2c8 <max3+0xc>
 2c6:	68 2f       	mov	r22, r24

}
 2c8:	86 2f       	mov	r24, r22
 2ca:	08 95       	ret

000002cc <follow_the_light>:
    // enable global interrupts
    sei();

}

void follow_the_light() {
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
	lcd_puts("FL LG");
 2d0:	84 ec       	ldi	r24, 0xC4	; 196
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	//printf("I am at follow light ");
	uint8_t angle_prev, angle_next;

	move_servo(-10);
 2d8:	86 ef       	ldi	r24, 0xF6	; 246
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	angle_prev = adc_acquire();
 2e0:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 2e4:	ec 01       	movw	r28, r24
	//printf("angle prev = %d \n",angle_prev);
	move_servo(angle_prev);
 2e6:	99 27       	eor	r25, r25
 2e8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	34 e3       	ldi	r19, 0x34	; 52
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	30 40       	sbci	r19, 0x00	; 0
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <follow_the_light+0x26>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <follow_the_light+0x30>
 2fc:	00 00       	nop
	_delay_ms(500);

	move_servo(20);
 2fe:	84 e1       	ldi	r24, 0x14	; 20
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	angle_next = adc_acquire();
 306:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 30a:	9f ef       	ldi	r25, 0xFF	; 255
 30c:	24 e3       	ldi	r18, 0x34	; 52
 30e:	3c e0       	ldi	r19, 0x0C	; 12
 310:	91 50       	subi	r25, 0x01	; 1
 312:	20 40       	sbci	r18, 0x00	; 0
 314:	30 40       	sbci	r19, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <follow_the_light+0x44>
 318:	00 c0       	rjmp	.+0      	; 0x31a <follow_the_light+0x4e>
 31a:	00 00       	nop
	_delay_ms(500);

	// local sweep
	uint8_t optimal_angle = max3(INITADC, angle_prev, angle_next);
 31c:	48 2f       	mov	r20, r24
 31e:	6c 2f       	mov	r22, r28
 320:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
 324:	0e 94 5e 01 	call	0x2bc	; 0x2bc <max3>
	//lcd_puts_P((char *) optimal_angle);
	printf("optimal angle %d \n ", (int)optimal_angle);
 328:	c8 2f       	mov	r28, r24
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	1f 92       	push	r1
 32e:	8f 93       	push	r24
 330:	8a ec       	ldi	r24, 0xCA	; 202
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	9f 93       	push	r25
 336:	8f 93       	push	r24
 338:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>

	// full sweep
	while (adc_acquire() < optimal_angle) {
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0d c0       	rjmp	.+26     	; 0x360 <follow_the_light+0x94>
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	94 e3       	ldi	r25, 0x34	; 52
 34a:	2c e0       	ldi	r18, 0x0C	; 12
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	20 40       	sbci	r18, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <follow_the_light+0x80>
 354:	00 c0       	rjmp	.+0      	; 0x356 <follow_the_light+0x8a>
 356:	00 00       	nop
		_delay_ms(500);
		move_servo(20);
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	uint8_t optimal_angle = max3(INITADC, angle_prev, angle_next);
	//lcd_puts_P((char *) optimal_angle);
	printf("optimal angle %d \n ", (int)optimal_angle);

	// full sweep
	while (adc_acquire() < optimal_angle) {
 360:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 364:	8c 17       	cp	r24, r28
 366:	9d 07       	cpc	r25, r29
 368:	74 f3       	brlt	.-36     	; 0x346 <follow_the_light+0x7a>
		_delay_ms(500);
		move_servo(20);
	}


}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <avoid_the_light>:
void avoid_the_light() {
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
	printf("I am at avoid light");
 37c:	8e ed       	ldi	r24, 0xDE	; 222
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
	lcd_puts("RV LG");
 388:	82 ef       	ldi	r24, 0xF2	; 242
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	uint8_t angle_prev, angle_next;
	printf(" adc_acquire() = %hhu  \n", adc_acquire());
 390:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 394:	9f 93       	push	r25
 396:	8f 93       	push	r24
 398:	88 ef       	ldi	r24, 0xF8	; 248
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	9f 93       	push	r25
 39e:	8f 93       	push	r24
 3a0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
	move_servo(-10);
 3a4:	86 ef       	ldi	r24, 0xF6	; 246
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	angle_prev = adc_acquire();
 3ac:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 3b0:	ec 01       	movw	r28, r24
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	84 e3       	ldi	r24, 0x34	; 52
 3b6:	9c e0       	ldi	r25, 0x0C	; 12
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <avoid_the_light+0x48>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <avoid_the_light+0x52>
 3c2:	00 00       	nop
	
	_delay_ms(500);

	move_servo(20);
 3c4:	84 e1       	ldi	r24, 0x14	; 20
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
	angle_next = adc_acquire();
 3cc:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 3d0:	7c 01       	movw	r14, r24
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	84 e3       	ldi	r24, 0x34	; 52
 3d6:	9c e0       	ldi	r25, 0x0C	; 12
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <avoid_the_light+0x68>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <avoid_the_light+0x72>
 3e2:	00 00       	nop
	_delay_ms(500);

	// local sweep
	uint8_t optimal_angle = max3(INITADC, angle_prev, angle_next);
 3e4:	4e 2d       	mov	r20, r14
 3e6:	6c 2f       	mov	r22, r28
 3e8:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
 3ec:	0e 94 5e 01 	call	0x2bc	; 0x2bc <max3>
	//lcd_puts_P((char *) optimal_angle);
	printf("optimal angle =%d , prev_angle = %d , next_angle = %d \n", optimal_angle, angle_prev, angle_next );
 3f0:	08 2f       	mov	r16, r24
 3f2:	10 e0       	ldi	r17, 0x00	; 0
 3f4:	ff 24       	eor	r15, r15
 3f6:	ff 92       	push	r15
 3f8:	ef 92       	push	r14
 3fa:	dd 27       	eor	r29, r29
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	1f 92       	push	r1
 402:	8f 93       	push	r24
 404:	81 e1       	ldi	r24, 0x11	; 17
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>

	// full sweep
	while (adc_acquire() > optimal_angle) {
 410:	8d b7       	in	r24, 0x3d	; 61
 412:	9e b7       	in	r25, 0x3e	; 62
 414:	0e 96       	adiw	r24, 0x0e	; 14
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	9e bf       	out	0x3e, r25	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	8d bf       	out	0x3d, r24	; 61
		printf("adc_acquire() = %hhu ", adc_acquire());
 420:	c9 e4       	ldi	r28, 0x49	; 73
 422:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t optimal_angle = max3(INITADC, angle_prev, angle_next);
	//lcd_puts_P((char *) optimal_angle);
	printf("optimal angle =%d , prev_angle = %d , next_angle = %d \n", optimal_angle, angle_prev, angle_next );

	// full sweep
	while (adc_acquire() > optimal_angle) {
 424:	19 c0       	rjmp	.+50     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		printf("adc_acquire() = %hhu ", adc_acquire());
 426:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	94 e3       	ldi	r25, 0x34	; 52
 43a:	2c e0       	ldi	r18, 0x0C	; 12
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	20 40       	sbci	r18, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
		_delay_ms(500);
		move_servo(20);
 448:	84 e1       	ldi	r24, 0x14	; 20
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <move_servo>
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
	uint8_t optimal_angle = max3(INITADC, angle_prev, angle_next);
	//lcd_puts_P((char *) optimal_angle);
	printf("optimal angle =%d , prev_angle = %d , next_angle = %d \n", optimal_angle, angle_prev, angle_next );

	// full sweep
	while (adc_acquire() > optimal_angle) {
 458:	0e 94 2d 01 	call	0x25a	; 0x25a <adc_acquire>
 45c:	08 17       	cp	r16, r24
 45e:	19 07       	cpc	r17, r25
 460:	14 f3       	brlt	.-60     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		printf("adc_acquire() = %hhu ", adc_acquire());
		_delay_ms(500);
		move_servo(20);
	}
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	ff 90       	pop	r15
 46c:	ef 90       	pop	r14
 46e:	08 95       	ret

00000470 <main>:
}



int main(void)
{
 470:	8f 92       	push	r8
 472:	9f 92       	push	r9
 474:	af 92       	push	r10
 476:	bf 92       	push	r11
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
	
	stderr = stdin = stdout = &uart_stream;
 488:	ea ee       	ldi	r30, 0xEA	; 234
 48a:	f2 e0       	ldi	r31, 0x02	; 2
 48c:	8d e6       	ldi	r24, 0x6D	; 109
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	93 83       	std	Z+3, r25	; 0x03
 492:	82 83       	std	Z+2, r24	; 0x02
 494:	91 83       	std	Z+1, r25	; 0x01
 496:	80 83       	st	Z, r24
 498:	95 83       	std	Z+5, r25	; 0x05
 49a:	84 83       	std	Z+4, r24	; 0x04
	UARTInit(); 
 49c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <UARTInit>
	
	printf("welcome to proj4 servo \n");
 4a0:	8f e5       	ldi	r24, 0x5F	; 95
 4a2:	92 e0       	ldi	r25, 0x02	; 2
 4a4:	0e 94 77 03 	call	0x6ee	; 0x6ee <puts>
	LCD_Init();
 4a8:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Init>
	lcd_puts("HEllo");
 4ac:	87 e7       	ldi	r24, 0x77	; 119
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	39 e6       	ldi	r19, 0x69	; 105
 4b8:	88 e1       	ldi	r24, 0x18	; 24
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	30 40       	sbci	r19, 0x00	; 0
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x4a>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x54>
 4c4:	00 00       	nop
	_delay_ms(1000);
	//servo_init();
	//                             adc_init();
	//timer0_init();
	pins_init();
 4c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pins_init>
	//INITADC = adc_acquire();
	joy_init();
 4ca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <joy_init>
	//#####################
	DDRD = 0xFF;
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	8a b9       	out	0x0a, r24	; 10
    PORTD = 254;
 4d2:	9e ef       	ldi	r25, 0xFE	; 254
 4d4:	9b b9       	out	0x0b, r25	; 11
    
    PORTD = 255;
 4d6:	8b b9       	out	0x0b, r24	; 11
	
	//move_servo(20);
	//_delay_ms(10000);
	timer0_init();
 4d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <timer0_init>
	servo_init();
 4dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <servo_init>
	uint8_t joy_val = JoyGet();
 4e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <JoyGet>
	
	
}
uint8_t press_right() {

    return (PORTE & 0b00001000);
 4e4:	9e b1       	in	r25, 0x0e	; 14
	uint8_t r_click = press_right();
	
	uint8_t mode = 0;
	
	//move_servo(-10);
	while(joy_val != r_click ){
 4e6:	98 70       	andi	r25, 0x08	; 8
 4e8:	89 17       	cp	r24, r25
 4ea:	09 f4       	brne	.+2      	; 0x4ee <main+0x7e>
 4ec:	95 c0       	rjmp	.+298    	; 0x618 <__stack+0x119>
 4ee:	91 2c       	mov	r9, r1
		r_click = press_right();
		joy_val = JoyGet();
		
	
		printf("joy_val = %d \n", joy_val);
 4f0:	0f 2e       	mov	r0, r31
 4f2:	fd e7       	ldi	r31, 0x7D	; 125
 4f4:	ef 2e       	mov	r14, r31
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	ff 2e       	mov	r15, r31
 4fa:	f0 2d       	mov	r31, r0
		printf("right_click = %d ", r_click);
 4fc:	0c e8       	ldi	r16, 0x8C	; 140
 4fe:	12 e0       	ldi	r17, 0x02	; 2
			printf("mode = %d \n",mode);
			_delay_ms(1000);
			
        } else if (joy_val == press_down()) {
            mode--;
			printf("mode =%d \n", mode);
 500:	0f 2e       	mov	r0, r31
 502:	fe ea       	ldi	r31, 0xAE	; 174
 504:	af 2e       	mov	r10, r31
 506:	f2 e0       	ldi	r31, 0x02	; 2
 508:	bf 2e       	mov	r11, r31
 50a:	f0 2d       	mov	r31, r0
		printf("right_click = %d ", r_click);
		
		if (joy_val == press_up()) {
            mode++;
			lcd_puts("FLG");
			printf("mode = %d \n",mode);
 50c:	0f 2e       	mov	r0, r31
 50e:	f2 ea       	ldi	r31, 0xA2	; 162
 510:	cf 2e       	mov	r12, r31
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	df 2e       	mov	r13, r31
 516:	f0 2d       	mov	r31, r0
	
	
}
uint8_t press_right() {

    return (PORTE & 0b00001000);
 518:	ce b1       	in	r28, 0x0e	; 14
 51a:	c8 70       	andi	r28, 0x08	; 8
	uint8_t mode = 0;
	
	//move_servo(-10);
	while(joy_val != r_click ){
		r_click = press_right();
		joy_val = JoyGet();
 51c:	0e 94 56 01 	call	0x2ac	; 0x2ac <JoyGet>
 520:	d8 2f       	mov	r29, r24
		
	
		printf("joy_val = %d \n", joy_val);
 522:	1f 92       	push	r1
 524:	8f 93       	push	r24
 526:	ff 92       	push	r15
 528:	ef 92       	push	r14
 52a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
		printf("right_click = %d ", r_click);
 52e:	1f 92       	push	r1
 530:	cf 93       	push	r28
 532:	1f 93       	push	r17
 534:	0f 93       	push	r16
 536:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
}


uint8_t press_up() {

    return (PORTB & 0b10000000);
 53a:	85 b1       	in	r24, 0x05	; 5
		
	
		printf("joy_val = %d \n", joy_val);
		printf("right_click = %d ", r_click);
		
		if (joy_val == press_up()) {
 53c:	80 78       	andi	r24, 0x80	; 128
 53e:	2d b7       	in	r18, 0x3d	; 61
 540:	3e b7       	in	r19, 0x3e	; 62
 542:	28 5f       	subi	r18, 0xF8	; 248
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	3e bf       	out	0x3e, r19	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	2d bf       	out	0x3d, r18	; 61
 550:	d8 13       	cpse	r29, r24
 552:	19 c0       	rjmp	.+50     	; 0x586 <__stack+0x87>
            mode++;
 554:	93 94       	inc	r9
			lcd_puts("FLG");
 556:	8e e9       	ldi	r24, 0x9E	; 158
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
			printf("mode = %d \n",mode);
 55e:	1f 92       	push	r1
 560:	9f 92       	push	r9
 562:	df 92       	push	r13
 564:	cf 92       	push	r12
 566:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 56a:	3f ef       	ldi	r19, 0xFF	; 255
 56c:	89 e6       	ldi	r24, 0x69	; 105
 56e:	98 e1       	ldi	r25, 0x18	; 24
 570:	31 50       	subi	r19, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__stack+0x71>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__stack+0x7b>
 57a:	00 00       	nop
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	1c c0       	rjmp	.+56     	; 0x5be <__stack+0xbf>
/*
 * Returns status of JOYSTICK DOWN
 */
uint8_t press_down() {

    return (PORTB & 0b01000000);
 586:	85 b1       	in	r24, 0x05	; 5
            mode++;
			lcd_puts("FLG");
			printf("mode = %d \n",mode);
			_delay_ms(1000);
			
        } else if (joy_val == press_down()) {
 588:	80 74       	andi	r24, 0x40	; 64
 58a:	d8 13       	cpse	r29, r24
 58c:	18 c0       	rjmp	.+48     	; 0x5be <__stack+0xbf>
            mode--;
 58e:	9a 94       	dec	r9
			printf("mode =%d \n", mode);
 590:	1f 92       	push	r1
 592:	9f 92       	push	r9
 594:	bf 92       	push	r11
 596:	af 92       	push	r10
 598:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
			lcd_puts("RVLG");
 59c:	89 eb       	ldi	r24, 0xB9	; 185
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	39 e6       	ldi	r19, 0x69	; 105
 5a8:	88 e1       	ldi	r24, 0x18	; 24
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	30 40       	sbci	r19, 0x00	; 0
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <__stack+0xab>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__stack+0xb5>
 5b4:	00 00       	nop
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
			
        }
		

		// display menu string depending on value of mode
        (mode % 2) ? printf("following light \n") : printf("reverse light \n");
 5be:	99 2d       	mov	r25, r9
 5c0:	91 70       	andi	r25, 0x01	; 1
 5c2:	89 2e       	mov	r8, r25
 5c4:	90 fe       	sbrs	r9, 0
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__stack+0xd3>
 5c8:	8e eb       	ldi	r24, 0xBE	; 190
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	0e 94 77 03 	call	0x6ee	; 0x6ee <puts>
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <__stack+0xdb>
 5d2:	8f ec       	ldi	r24, 0xCF	; 207
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	0e 94 77 03 	call	0x6ee	; 0x6ee <puts>
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	39 e6       	ldi	r19, 0x69	; 105
 5de:	88 e1       	ldi	r24, 0x18	; 24
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	30 40       	sbci	r19, 0x00	; 0
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__stack+0xe1>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__stack+0xeb>
 5ea:	00 00       	nop
	uint8_t r_click = press_right();
	
	uint8_t mode = 0;
	
	//move_servo(-10);
	while(joy_val != r_click ){
 5ec:	dc 13       	cpse	r29, r28
 5ee:	94 cf       	rjmp	.-216    	; 0x518 <__stack+0x19>
		// display menu string depending on value of mode
        (mode % 2) ? printf("following light \n") : printf("reverse light \n");
		//printf("adc_read  = %d ", adc_val);
		 _delay_ms(1000);
	}
		printf("mode %d \n", mode);
 5f0:	1f 92       	push	r1
 5f2:	9f 92       	push	r9
 5f4:	8e ed       	ldi	r24, 0xDE	; 222
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	9f 93       	push	r25
 5fa:	8f 93       	push	r24
 5fc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
		(mode % 2) ? follow_the_light() : avoid_the_light();
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	88 20       	and	r8, r8
 60a:	19 f0       	breq	.+6      	; 0x612 <__stack+0x113>
 60c:	0e 94 66 01 	call	0x2cc	; 0x2cc <follow_the_light>
 610:	10 c0       	rjmp	.+32     	; 0x632 <__stack+0x133>
 612:	0e 94 b8 01 	call	0x370	; 0x370 <avoid_the_light>
 616:	0d c0       	rjmp	.+26     	; 0x632 <__stack+0x133>
		// display menu string depending on value of mode
        (mode % 2) ? printf("following light \n") : printf("reverse light \n");
		//printf("adc_read  = %d ", adc_val);
		 _delay_ms(1000);
	}
		printf("mode %d \n", mode);
 618:	1f 92       	push	r1
 61a:	1f 92       	push	r1
 61c:	8e ed       	ldi	r24, 0xDE	; 222
 61e:	92 e0       	ldi	r25, 0x02	; 2
 620:	9f 93       	push	r25
 622:	8f 93       	push	r24
 624:	0e 94 61 03 	call	0x6c2	; 0x6c2 <printf>
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	f0 cf       	rjmp	.-32     	; 0x612 <__stack+0x113>
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	29 e6       	ldi	r18, 0x69	; 105
 636:	38 e1       	ldi	r19, 0x18	; 24
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	20 40       	sbci	r18, 0x00	; 0
 63c:	30 40       	sbci	r19, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <__stack+0x139>
 640:	00 c0       	rjmp	.+0      	; 0x642 <__stack+0x143>
 642:	00 00       	nop
    // wait a sufficient amount of time before termination
    //_delay_ms(10000);

    return EXIT_SUCCESS;
	
}
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	df 90       	pop	r13
 656:	cf 90       	pop	r12
 658:	bf 90       	pop	r11
 65a:	af 90       	pop	r10
 65c:	9f 90       	pop	r9
 65e:	8f 90       	pop	r8
 660:	08 95       	ret

00000662 <UARTPutch>:
    UDR = ch;

    return 0;
}

int UARTPutch(char ch, FILE *stream) {
 662:	cf 93       	push	r28
 664:	c8 2f       	mov	r28, r24

    if (ch == '\n')
 666:	8a 30       	cpi	r24, 0x0A	; 10
 668:	19 f4       	brne	.+6      	; 0x670 <UARTPutch+0xe>
        UARTPutch('\r', stream);
 66a:	8d e0       	ldi	r24, 0x0D	; 13
 66c:	0e 94 31 03 	call	0x662	; 0x662 <UARTPutch>

    while (!(UCSRA & (1 << UDRE)));  // loop until bit is set
 670:	e0 ec       	ldi	r30, 0xC0	; 192
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	85 ff       	sbrs	r24, 5
 678:	fd cf       	rjmp	.-6      	; 0x674 <UARTPutch+0x12>
    UDR = ch;
 67a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    return 0;

}
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <UARTGetch>:

int UARTGetch(FILE *stream) {
 686:	cf 93       	push	r28
 688:	bc 01       	movw	r22, r24

    unsigned char ch;

    while (!(UCSRA & (1 << RXC)));  // loop until bit is set
 68a:	e0 ec       	ldi	r30, 0xC0	; 192
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	90 81       	ld	r25, Z
 690:	99 23       	and	r25, r25
 692:	ec f7       	brge	.-6      	; 0x68e <UARTGetch+0x8>
    ch = UDR;
 694:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* Echo the output back to the terminal */
    UARTPutch(ch, stream);
 698:	8c 2f       	mov	r24, r28
 69a:	0e 94 31 03 	call	0x662	; 0x662 <UARTPutch>

    return ch;
}
 69e:	8c 2f       	mov	r24, r28
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <UARTInit>:
void UARTInit(void) {

    // BAUD RATE of 4800 for 8Mhz
    // UBRRH = 0;
    // UBRRL = 103;
    UBRRH = (((F_CPU / BAUD_RATE) / 16) - 1) >> 8;  // set baud rate
 6a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRRL = (((F_CPU / BAUD_RATE) / 16) - 1);
 6aa:	87 e6       	ldi	r24, 0x67	; 103
 6ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>


    UCSRA = 0;  //clearing all flags
 6b0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>


    UCSRB = (1 << RXEN0) | (1 << TXEN0);
 6b4:	88 e1       	ldi	r24, 0x18	; 24
 6b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    //  UCSRB = (1<<RXEN)|(1<<TXEN);


    // UCSR0C =(1<<USBS0)|(3<<UCSZ00);
    /* Set Frame: Data 8 Bit, No Parity and 2 Stop Bit */
    UCSRC = (1 << USBS0) | (3 << UCSZ00);
 6ba:	8e e0       	ldi	r24, 0x0E	; 14
 6bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 6c0:	08 95       	ret

000006c2 <printf>:
 6c2:	a0 e0       	ldi	r26, 0x00	; 0
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e7 e6       	ldi	r30, 0x67	; 103
 6c8:	f3 e0       	ldi	r31, 0x03	; 3
 6ca:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__prologue_saves__+0x20>
 6ce:	ae 01       	movw	r20, r28
 6d0:	4b 5f       	subi	r20, 0xFB	; 251
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255
 6d4:	fa 01       	movw	r30, r20
 6d6:	61 91       	ld	r22, Z+
 6d8:	71 91       	ld	r23, Z+
 6da:	af 01       	movw	r20, r30
 6dc:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__iob+0x2>
 6e0:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__iob+0x3>
 6e4:	0e 94 a7 03 	call	0x74e	; 0x74e <vfprintf>
 6e8:	e2 e0       	ldi	r30, 0x02	; 2
 6ea:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__epilogue_restores__+0x20>

000006ee <puts>:
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <__iob+0x2>
 6fa:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <__iob+0x3>
 6fe:	23 81       	ldd	r18, Z+3	; 0x03
 700:	21 ff       	sbrs	r18, 1
 702:	1b c0       	rjmp	.+54     	; 0x73a <puts+0x4c>
 704:	8c 01       	movw	r16, r24
 706:	d0 e0       	ldi	r29, 0x00	; 0
 708:	c0 e0       	ldi	r28, 0x00	; 0
 70a:	f8 01       	movw	r30, r16
 70c:	81 91       	ld	r24, Z+
 70e:	8f 01       	movw	r16, r30
 710:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <__iob+0x2>
 714:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <__iob+0x3>
 718:	db 01       	movw	r26, r22
 71a:	18 96       	adiw	r26, 0x08	; 8
 71c:	ed 91       	ld	r30, X+
 71e:	fc 91       	ld	r31, X
 720:	19 97       	sbiw	r26, 0x09	; 9
 722:	88 23       	and	r24, r24
 724:	31 f0       	breq	.+12     	; 0x732 <puts+0x44>
 726:	09 95       	icall
 728:	89 2b       	or	r24, r25
 72a:	79 f3       	breq	.-34     	; 0x70a <puts+0x1c>
 72c:	df ef       	ldi	r29, 0xFF	; 255
 72e:	cf ef       	ldi	r28, 0xFF	; 255
 730:	ec cf       	rjmp	.-40     	; 0x70a <puts+0x1c>
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	09 95       	icall
 736:	89 2b       	or	r24, r25
 738:	19 f0       	breq	.+6      	; 0x740 <puts+0x52>
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	9f ef       	ldi	r25, 0xFF	; 255
 73e:	02 c0       	rjmp	.+4      	; 0x744 <puts+0x56>
 740:	8d 2f       	mov	r24, r29
 742:	9c 2f       	mov	r25, r28
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	08 95       	ret

0000074e <vfprintf>:
 74e:	ab e0       	ldi	r26, 0x0B	; 11
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	ed ea       	ldi	r30, 0xAD	; 173
 754:	f3 e0       	ldi	r31, 0x03	; 3
 756:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__prologue_saves__>
 75a:	6c 01       	movw	r12, r24
 75c:	7b 01       	movw	r14, r22
 75e:	8a 01       	movw	r16, r20
 760:	fc 01       	movw	r30, r24
 762:	17 82       	std	Z+7, r1	; 0x07
 764:	16 82       	std	Z+6, r1	; 0x06
 766:	83 81       	ldd	r24, Z+3	; 0x03
 768:	81 ff       	sbrs	r24, 1
 76a:	cc c1       	rjmp	.+920    	; 0xb04 <vfprintf+0x3b6>
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	3c 01       	movw	r6, r24
 772:	f6 01       	movw	r30, r12
 774:	93 81       	ldd	r25, Z+3	; 0x03
 776:	f7 01       	movw	r30, r14
 778:	93 fd       	sbrc	r25, 3
 77a:	85 91       	lpm	r24, Z+
 77c:	93 ff       	sbrs	r25, 3
 77e:	81 91       	ld	r24, Z+
 780:	7f 01       	movw	r14, r30
 782:	88 23       	and	r24, r24
 784:	09 f4       	brne	.+2      	; 0x788 <vfprintf+0x3a>
 786:	ba c1       	rjmp	.+884    	; 0xafc <vfprintf+0x3ae>
 788:	85 32       	cpi	r24, 0x25	; 37
 78a:	39 f4       	brne	.+14     	; 0x79a <vfprintf+0x4c>
 78c:	93 fd       	sbrc	r25, 3
 78e:	85 91       	lpm	r24, Z+
 790:	93 ff       	sbrs	r25, 3
 792:	81 91       	ld	r24, Z+
 794:	7f 01       	movw	r14, r30
 796:	85 32       	cpi	r24, 0x25	; 37
 798:	29 f4       	brne	.+10     	; 0x7a4 <vfprintf+0x56>
 79a:	b6 01       	movw	r22, r12
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 7a2:	e7 cf       	rjmp	.-50     	; 0x772 <vfprintf+0x24>
 7a4:	91 2c       	mov	r9, r1
 7a6:	21 2c       	mov	r2, r1
 7a8:	31 2c       	mov	r3, r1
 7aa:	ff e1       	ldi	r31, 0x1F	; 31
 7ac:	f3 15       	cp	r31, r3
 7ae:	d8 f0       	brcs	.+54     	; 0x7e6 <vfprintf+0x98>
 7b0:	8b 32       	cpi	r24, 0x2B	; 43
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <vfprintf+0x84>
 7b4:	38 f4       	brcc	.+14     	; 0x7c4 <vfprintf+0x76>
 7b6:	80 32       	cpi	r24, 0x20	; 32
 7b8:	79 f0       	breq	.+30     	; 0x7d8 <vfprintf+0x8a>
 7ba:	83 32       	cpi	r24, 0x23	; 35
 7bc:	a1 f4       	brne	.+40     	; 0x7e6 <vfprintf+0x98>
 7be:	23 2d       	mov	r18, r3
 7c0:	20 61       	ori	r18, 0x10	; 16
 7c2:	1d c0       	rjmp	.+58     	; 0x7fe <vfprintf+0xb0>
 7c4:	8d 32       	cpi	r24, 0x2D	; 45
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <vfprintf+0x92>
 7c8:	80 33       	cpi	r24, 0x30	; 48
 7ca:	69 f4       	brne	.+26     	; 0x7e6 <vfprintf+0x98>
 7cc:	23 2d       	mov	r18, r3
 7ce:	21 60       	ori	r18, 0x01	; 1
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <vfprintf+0xb0>
 7d2:	83 2d       	mov	r24, r3
 7d4:	82 60       	ori	r24, 0x02	; 2
 7d6:	38 2e       	mov	r3, r24
 7d8:	e3 2d       	mov	r30, r3
 7da:	e4 60       	ori	r30, 0x04	; 4
 7dc:	3e 2e       	mov	r3, r30
 7de:	2a c0       	rjmp	.+84     	; 0x834 <vfprintf+0xe6>
 7e0:	f3 2d       	mov	r31, r3
 7e2:	f8 60       	ori	r31, 0x08	; 8
 7e4:	1d c0       	rjmp	.+58     	; 0x820 <vfprintf+0xd2>
 7e6:	37 fc       	sbrc	r3, 7
 7e8:	2d c0       	rjmp	.+90     	; 0x844 <vfprintf+0xf6>
 7ea:	20 ed       	ldi	r18, 0xD0	; 208
 7ec:	28 0f       	add	r18, r24
 7ee:	2a 30       	cpi	r18, 0x0A	; 10
 7f0:	40 f0       	brcs	.+16     	; 0x802 <vfprintf+0xb4>
 7f2:	8e 32       	cpi	r24, 0x2E	; 46
 7f4:	b9 f4       	brne	.+46     	; 0x824 <vfprintf+0xd6>
 7f6:	36 fc       	sbrc	r3, 6
 7f8:	81 c1       	rjmp	.+770    	; 0xafc <vfprintf+0x3ae>
 7fa:	23 2d       	mov	r18, r3
 7fc:	20 64       	ori	r18, 0x40	; 64
 7fe:	32 2e       	mov	r3, r18
 800:	19 c0       	rjmp	.+50     	; 0x834 <vfprintf+0xe6>
 802:	36 fe       	sbrs	r3, 6
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0xc4>
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	98 9e       	mul	r9, r24
 80a:	20 0d       	add	r18, r0
 80c:	11 24       	eor	r1, r1
 80e:	92 2e       	mov	r9, r18
 810:	11 c0       	rjmp	.+34     	; 0x834 <vfprintf+0xe6>
 812:	ea e0       	ldi	r30, 0x0A	; 10
 814:	2e 9e       	mul	r2, r30
 816:	20 0d       	add	r18, r0
 818:	11 24       	eor	r1, r1
 81a:	22 2e       	mov	r2, r18
 81c:	f3 2d       	mov	r31, r3
 81e:	f0 62       	ori	r31, 0x20	; 32
 820:	3f 2e       	mov	r3, r31
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0xe6>
 824:	8c 36       	cpi	r24, 0x6C	; 108
 826:	21 f4       	brne	.+8      	; 0x830 <vfprintf+0xe2>
 828:	83 2d       	mov	r24, r3
 82a:	80 68       	ori	r24, 0x80	; 128
 82c:	38 2e       	mov	r3, r24
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0xe6>
 830:	88 36       	cpi	r24, 0x68	; 104
 832:	41 f4       	brne	.+16     	; 0x844 <vfprintf+0xf6>
 834:	f7 01       	movw	r30, r14
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	7f 01       	movw	r14, r30
 840:	81 11       	cpse	r24, r1
 842:	b3 cf       	rjmp	.-154    	; 0x7aa <vfprintf+0x5c>
 844:	98 2f       	mov	r25, r24
 846:	9f 7d       	andi	r25, 0xDF	; 223
 848:	95 54       	subi	r25, 0x45	; 69
 84a:	93 30       	cpi	r25, 0x03	; 3
 84c:	28 f4       	brcc	.+10     	; 0x858 <vfprintf+0x10a>
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	9f e3       	ldi	r25, 0x3F	; 63
 854:	99 83       	std	Y+1, r25	; 0x01
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x124>
 858:	83 36       	cpi	r24, 0x63	; 99
 85a:	31 f0       	breq	.+12     	; 0x868 <vfprintf+0x11a>
 85c:	83 37       	cpi	r24, 0x73	; 115
 85e:	71 f0       	breq	.+28     	; 0x87c <vfprintf+0x12e>
 860:	83 35       	cpi	r24, 0x53	; 83
 862:	09 f0       	breq	.+2      	; 0x866 <vfprintf+0x118>
 864:	59 c0       	rjmp	.+178    	; 0x918 <vfprintf+0x1ca>
 866:	21 c0       	rjmp	.+66     	; 0x8aa <vfprintf+0x15c>
 868:	f8 01       	movw	r30, r16
 86a:	80 81       	ld	r24, Z
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	0e 5f       	subi	r16, 0xFE	; 254
 870:	1f 4f       	sbci	r17, 0xFF	; 255
 872:	88 24       	eor	r8, r8
 874:	83 94       	inc	r8
 876:	91 2c       	mov	r9, r1
 878:	53 01       	movw	r10, r6
 87a:	13 c0       	rjmp	.+38     	; 0x8a2 <vfprintf+0x154>
 87c:	28 01       	movw	r4, r16
 87e:	f2 e0       	ldi	r31, 0x02	; 2
 880:	4f 0e       	add	r4, r31
 882:	51 1c       	adc	r5, r1
 884:	f8 01       	movw	r30, r16
 886:	a0 80       	ld	r10, Z
 888:	b1 80       	ldd	r11, Z+1	; 0x01
 88a:	36 fe       	sbrs	r3, 6
 88c:	03 c0       	rjmp	.+6      	; 0x894 <vfprintf+0x146>
 88e:	69 2d       	mov	r22, r9
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x14a>
 894:	6f ef       	ldi	r22, 0xFF	; 255
 896:	7f ef       	ldi	r23, 0xFF	; 255
 898:	c5 01       	movw	r24, r10
 89a:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen>
 89e:	4c 01       	movw	r8, r24
 8a0:	82 01       	movw	r16, r4
 8a2:	f3 2d       	mov	r31, r3
 8a4:	ff 77       	andi	r31, 0x7F	; 127
 8a6:	3f 2e       	mov	r3, r31
 8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <vfprintf+0x188>
 8aa:	28 01       	movw	r4, r16
 8ac:	22 e0       	ldi	r18, 0x02	; 2
 8ae:	42 0e       	add	r4, r18
 8b0:	51 1c       	adc	r5, r1
 8b2:	f8 01       	movw	r30, r16
 8b4:	a0 80       	ld	r10, Z
 8b6:	b1 80       	ldd	r11, Z+1	; 0x01
 8b8:	36 fe       	sbrs	r3, 6
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <vfprintf+0x174>
 8bc:	69 2d       	mov	r22, r9
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x178>
 8c2:	6f ef       	ldi	r22, 0xFF	; 255
 8c4:	7f ef       	ldi	r23, 0xFF	; 255
 8c6:	c5 01       	movw	r24, r10
 8c8:	0e 94 88 05 	call	0xb10	; 0xb10 <strnlen_P>
 8cc:	4c 01       	movw	r8, r24
 8ce:	f3 2d       	mov	r31, r3
 8d0:	f0 68       	ori	r31, 0x80	; 128
 8d2:	3f 2e       	mov	r3, r31
 8d4:	82 01       	movw	r16, r4
 8d6:	33 fc       	sbrc	r3, 3
 8d8:	1b c0       	rjmp	.+54     	; 0x910 <vfprintf+0x1c2>
 8da:	82 2d       	mov	r24, r2
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	88 16       	cp	r8, r24
 8e0:	99 06       	cpc	r9, r25
 8e2:	b0 f4       	brcc	.+44     	; 0x910 <vfprintf+0x1c2>
 8e4:	b6 01       	movw	r22, r12
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 8ee:	2a 94       	dec	r2
 8f0:	f4 cf       	rjmp	.-24     	; 0x8da <vfprintf+0x18c>
 8f2:	f5 01       	movw	r30, r10
 8f4:	37 fc       	sbrc	r3, 7
 8f6:	85 91       	lpm	r24, Z+
 8f8:	37 fe       	sbrs	r3, 7
 8fa:	81 91       	ld	r24, Z+
 8fc:	5f 01       	movw	r10, r30
 8fe:	b6 01       	movw	r22, r12
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 906:	21 10       	cpse	r2, r1
 908:	2a 94       	dec	r2
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	82 1a       	sub	r8, r18
 90e:	91 08       	sbc	r9, r1
 910:	81 14       	cp	r8, r1
 912:	91 04       	cpc	r9, r1
 914:	71 f7       	brne	.-36     	; 0x8f2 <vfprintf+0x1a4>
 916:	e8 c0       	rjmp	.+464    	; 0xae8 <vfprintf+0x39a>
 918:	84 36       	cpi	r24, 0x64	; 100
 91a:	11 f0       	breq	.+4      	; 0x920 <vfprintf+0x1d2>
 91c:	89 36       	cpi	r24, 0x69	; 105
 91e:	41 f5       	brne	.+80     	; 0x970 <vfprintf+0x222>
 920:	f8 01       	movw	r30, r16
 922:	37 fe       	sbrs	r3, 7
 924:	07 c0       	rjmp	.+14     	; 0x934 <vfprintf+0x1e6>
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	82 81       	ldd	r24, Z+2	; 0x02
 92c:	93 81       	ldd	r25, Z+3	; 0x03
 92e:	0c 5f       	subi	r16, 0xFC	; 252
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	08 c0       	rjmp	.+16     	; 0x944 <vfprintf+0x1f6>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	07 2e       	mov	r0, r23
 93a:	00 0c       	add	r0, r0
 93c:	88 0b       	sbc	r24, r24
 93e:	99 0b       	sbc	r25, r25
 940:	0e 5f       	subi	r16, 0xFE	; 254
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	f3 2d       	mov	r31, r3
 946:	ff 76       	andi	r31, 0x6F	; 111
 948:	3f 2e       	mov	r3, r31
 94a:	97 ff       	sbrs	r25, 7
 94c:	09 c0       	rjmp	.+18     	; 0x960 <vfprintf+0x212>
 94e:	90 95       	com	r25
 950:	80 95       	com	r24
 952:	70 95       	com	r23
 954:	61 95       	neg	r22
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	f0 68       	ori	r31, 0x80	; 128
 95e:	3f 2e       	mov	r3, r31
 960:	2a e0       	ldi	r18, 0x0A	; 10
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	a3 01       	movw	r20, r6
 966:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 96a:	88 2e       	mov	r8, r24
 96c:	86 18       	sub	r8, r6
 96e:	45 c0       	rjmp	.+138    	; 0x9fa <vfprintf+0x2ac>
 970:	85 37       	cpi	r24, 0x75	; 117
 972:	31 f4       	brne	.+12     	; 0x980 <vfprintf+0x232>
 974:	23 2d       	mov	r18, r3
 976:	2f 7e       	andi	r18, 0xEF	; 239
 978:	b2 2e       	mov	r11, r18
 97a:	2a e0       	ldi	r18, 0x0A	; 10
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	25 c0       	rjmp	.+74     	; 0x9ca <vfprintf+0x27c>
 980:	93 2d       	mov	r25, r3
 982:	99 7f       	andi	r25, 0xF9	; 249
 984:	b9 2e       	mov	r11, r25
 986:	8f 36       	cpi	r24, 0x6F	; 111
 988:	c1 f0       	breq	.+48     	; 0x9ba <vfprintf+0x26c>
 98a:	18 f4       	brcc	.+6      	; 0x992 <vfprintf+0x244>
 98c:	88 35       	cpi	r24, 0x58	; 88
 98e:	79 f0       	breq	.+30     	; 0x9ae <vfprintf+0x260>
 990:	b5 c0       	rjmp	.+362    	; 0xafc <vfprintf+0x3ae>
 992:	80 37       	cpi	r24, 0x70	; 112
 994:	19 f0       	breq	.+6      	; 0x99c <vfprintf+0x24e>
 996:	88 37       	cpi	r24, 0x78	; 120
 998:	21 f0       	breq	.+8      	; 0x9a2 <vfprintf+0x254>
 99a:	b0 c0       	rjmp	.+352    	; 0xafc <vfprintf+0x3ae>
 99c:	e9 2f       	mov	r30, r25
 99e:	e0 61       	ori	r30, 0x10	; 16
 9a0:	be 2e       	mov	r11, r30
 9a2:	b4 fe       	sbrs	r11, 4
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <vfprintf+0x272>
 9a6:	fb 2d       	mov	r31, r11
 9a8:	f4 60       	ori	r31, 0x04	; 4
 9aa:	bf 2e       	mov	r11, r31
 9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <vfprintf+0x272>
 9ae:	34 fe       	sbrs	r3, 4
 9b0:	0a c0       	rjmp	.+20     	; 0x9c6 <vfprintf+0x278>
 9b2:	29 2f       	mov	r18, r25
 9b4:	26 60       	ori	r18, 0x06	; 6
 9b6:	b2 2e       	mov	r11, r18
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0x278>
 9ba:	28 e0       	ldi	r18, 0x08	; 8
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <vfprintf+0x27c>
 9c0:	20 e1       	ldi	r18, 0x10	; 16
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <vfprintf+0x27c>
 9c6:	20 e1       	ldi	r18, 0x10	; 16
 9c8:	32 e0       	ldi	r19, 0x02	; 2
 9ca:	f8 01       	movw	r30, r16
 9cc:	b7 fe       	sbrs	r11, 7
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <vfprintf+0x290>
 9d0:	60 81       	ld	r22, Z
 9d2:	71 81       	ldd	r23, Z+1	; 0x01
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	93 81       	ldd	r25, Z+3	; 0x03
 9d8:	0c 5f       	subi	r16, 0xFC	; 252
 9da:	1f 4f       	sbci	r17, 0xFF	; 255
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x29c>
 9de:	60 81       	ld	r22, Z
 9e0:	71 81       	ldd	r23, Z+1	; 0x01
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 5f       	subi	r16, 0xFE	; 254
 9e8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ea:	a3 01       	movw	r20, r6
 9ec:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 9f0:	88 2e       	mov	r8, r24
 9f2:	86 18       	sub	r8, r6
 9f4:	fb 2d       	mov	r31, r11
 9f6:	ff 77       	andi	r31, 0x7F	; 127
 9f8:	3f 2e       	mov	r3, r31
 9fa:	36 fe       	sbrs	r3, 6
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <vfprintf+0x2ca>
 9fe:	23 2d       	mov	r18, r3
 a00:	2e 7f       	andi	r18, 0xFE	; 254
 a02:	a2 2e       	mov	r10, r18
 a04:	89 14       	cp	r8, r9
 a06:	58 f4       	brcc	.+22     	; 0xa1e <vfprintf+0x2d0>
 a08:	34 fe       	sbrs	r3, 4
 a0a:	0b c0       	rjmp	.+22     	; 0xa22 <vfprintf+0x2d4>
 a0c:	32 fc       	sbrc	r3, 2
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <vfprintf+0x2d4>
 a10:	83 2d       	mov	r24, r3
 a12:	8e 7e       	andi	r24, 0xEE	; 238
 a14:	a8 2e       	mov	r10, r24
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <vfprintf+0x2d4>
 a18:	b8 2c       	mov	r11, r8
 a1a:	a3 2c       	mov	r10, r3
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <vfprintf+0x2d6>
 a1e:	b8 2c       	mov	r11, r8
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <vfprintf+0x2d6>
 a22:	b9 2c       	mov	r11, r9
 a24:	a4 fe       	sbrs	r10, 4
 a26:	0f c0       	rjmp	.+30     	; 0xa46 <vfprintf+0x2f8>
 a28:	fe 01       	movw	r30, r28
 a2a:	e8 0d       	add	r30, r8
 a2c:	f1 1d       	adc	r31, r1
 a2e:	80 81       	ld	r24, Z
 a30:	80 33       	cpi	r24, 0x30	; 48
 a32:	21 f4       	brne	.+8      	; 0xa3c <vfprintf+0x2ee>
 a34:	9a 2d       	mov	r25, r10
 a36:	99 7e       	andi	r25, 0xE9	; 233
 a38:	a9 2e       	mov	r10, r25
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <vfprintf+0x300>
 a3c:	a2 fe       	sbrs	r10, 2
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x2fe>
 a40:	b3 94       	inc	r11
 a42:	b3 94       	inc	r11
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <vfprintf+0x300>
 a46:	8a 2d       	mov	r24, r10
 a48:	86 78       	andi	r24, 0x86	; 134
 a4a:	09 f0       	breq	.+2      	; 0xa4e <vfprintf+0x300>
 a4c:	b3 94       	inc	r11
 a4e:	a3 fc       	sbrc	r10, 3
 a50:	11 c0       	rjmp	.+34     	; 0xa74 <vfprintf+0x326>
 a52:	a0 fe       	sbrs	r10, 0
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <vfprintf+0x314>
 a56:	b2 14       	cp	r11, r2
 a58:	88 f4       	brcc	.+34     	; 0xa7c <vfprintf+0x32e>
 a5a:	28 0c       	add	r2, r8
 a5c:	92 2c       	mov	r9, r2
 a5e:	9b 18       	sub	r9, r11
 a60:	0e c0       	rjmp	.+28     	; 0xa7e <vfprintf+0x330>
 a62:	b2 14       	cp	r11, r2
 a64:	60 f4       	brcc	.+24     	; 0xa7e <vfprintf+0x330>
 a66:	b6 01       	movw	r22, r12
 a68:	80 e2       	ldi	r24, 0x20	; 32
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a70:	b3 94       	inc	r11
 a72:	f7 cf       	rjmp	.-18     	; 0xa62 <vfprintf+0x314>
 a74:	b2 14       	cp	r11, r2
 a76:	18 f4       	brcc	.+6      	; 0xa7e <vfprintf+0x330>
 a78:	2b 18       	sub	r2, r11
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x332>
 a7c:	98 2c       	mov	r9, r8
 a7e:	21 2c       	mov	r2, r1
 a80:	a4 fe       	sbrs	r10, 4
 a82:	10 c0       	rjmp	.+32     	; 0xaa4 <vfprintf+0x356>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a8e:	a2 fe       	sbrs	r10, 2
 a90:	17 c0       	rjmp	.+46     	; 0xac0 <vfprintf+0x372>
 a92:	a1 fc       	sbrc	r10, 1
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <vfprintf+0x34e>
 a96:	88 e7       	ldi	r24, 0x78	; 120
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x352>
 a9c:	88 e5       	ldi	r24, 0x58	; 88
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	b6 01       	movw	r22, r12
 aa2:	0c c0       	rjmp	.+24     	; 0xabc <vfprintf+0x36e>
 aa4:	8a 2d       	mov	r24, r10
 aa6:	86 78       	andi	r24, 0x86	; 134
 aa8:	59 f0       	breq	.+22     	; 0xac0 <vfprintf+0x372>
 aaa:	a1 fe       	sbrs	r10, 1
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x364>
 aae:	8b e2       	ldi	r24, 0x2B	; 43
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <vfprintf+0x366>
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	a7 fc       	sbrc	r10, 7
 ab6:	8d e2       	ldi	r24, 0x2D	; 45
 ab8:	b6 01       	movw	r22, r12
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ac0:	89 14       	cp	r8, r9
 ac2:	38 f4       	brcc	.+14     	; 0xad2 <vfprintf+0x384>
 ac4:	b6 01       	movw	r22, r12
 ac6:	80 e3       	ldi	r24, 0x30	; 48
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ace:	9a 94       	dec	r9
 ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <vfprintf+0x372>
 ad2:	8a 94       	dec	r8
 ad4:	f3 01       	movw	r30, r6
 ad6:	e8 0d       	add	r30, r8
 ad8:	f1 1d       	adc	r31, r1
 ada:	80 81       	ld	r24, Z
 adc:	b6 01       	movw	r22, r12
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ae4:	81 10       	cpse	r8, r1
 ae6:	f5 cf       	rjmp	.-22     	; 0xad2 <vfprintf+0x384>
 ae8:	22 20       	and	r2, r2
 aea:	09 f4       	brne	.+2      	; 0xaee <vfprintf+0x3a0>
 aec:	42 ce       	rjmp	.-892    	; 0x772 <vfprintf+0x24>
 aee:	b6 01       	movw	r22, r12
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 af8:	2a 94       	dec	r2
 afa:	f6 cf       	rjmp	.-20     	; 0xae8 <vfprintf+0x39a>
 afc:	f6 01       	movw	r30, r12
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <vfprintf+0x3ba>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	2b 96       	adiw	r28, 0x0b	; 11
 b0a:	e2 e1       	ldi	r30, 0x12	; 18
 b0c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__epilogue_restores__>

00000b10 <strnlen_P>:
 b10:	fc 01       	movw	r30, r24
 b12:	05 90       	lpm	r0, Z+
 b14:	61 50       	subi	r22, 0x01	; 1
 b16:	70 40       	sbci	r23, 0x00	; 0
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen_P+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <strnlen>:
 b26:	fc 01       	movw	r30, r24
 b28:	61 50       	subi	r22, 0x01	; 1
 b2a:	70 40       	sbci	r23, 0x00	; 0
 b2c:	01 90       	ld	r0, Z+
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <fputc>:
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	fb 01       	movw	r30, r22
 b46:	23 81       	ldd	r18, Z+3	; 0x03
 b48:	21 fd       	sbrc	r18, 1
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <fputc+0x16>
 b4c:	8f ef       	ldi	r24, 0xFF	; 255
 b4e:	9f ef       	ldi	r25, 0xFF	; 255
 b50:	2c c0       	rjmp	.+88     	; 0xbaa <fputc+0x6e>
 b52:	22 ff       	sbrs	r18, 2
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <fputc+0x46>
 b56:	46 81       	ldd	r20, Z+6	; 0x06
 b58:	57 81       	ldd	r21, Z+7	; 0x07
 b5a:	24 81       	ldd	r18, Z+4	; 0x04
 b5c:	35 81       	ldd	r19, Z+5	; 0x05
 b5e:	42 17       	cp	r20, r18
 b60:	53 07       	cpc	r21, r19
 b62:	44 f4       	brge	.+16     	; 0xb74 <fputc+0x38>
 b64:	a0 81       	ld	r26, Z
 b66:	b1 81       	ldd	r27, Z+1	; 0x01
 b68:	9d 01       	movw	r18, r26
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	31 83       	std	Z+1, r19	; 0x01
 b70:	20 83       	st	Z, r18
 b72:	8c 93       	st	X, r24
 b74:	26 81       	ldd	r18, Z+6	; 0x06
 b76:	37 81       	ldd	r19, Z+7	; 0x07
 b78:	2f 5f       	subi	r18, 0xFF	; 255
 b7a:	3f 4f       	sbci	r19, 0xFF	; 255
 b7c:	37 83       	std	Z+7, r19	; 0x07
 b7e:	26 83       	std	Z+6, r18	; 0x06
 b80:	14 c0       	rjmp	.+40     	; 0xbaa <fputc+0x6e>
 b82:	8b 01       	movw	r16, r22
 b84:	ec 01       	movw	r28, r24
 b86:	fb 01       	movw	r30, r22
 b88:	00 84       	ldd	r0, Z+8	; 0x08
 b8a:	f1 85       	ldd	r31, Z+9	; 0x09
 b8c:	e0 2d       	mov	r30, r0
 b8e:	09 95       	icall
 b90:	89 2b       	or	r24, r25
 b92:	e1 f6       	brne	.-72     	; 0xb4c <fputc+0x10>
 b94:	d8 01       	movw	r26, r16
 b96:	16 96       	adiw	r26, 0x06	; 6
 b98:	8d 91       	ld	r24, X+
 b9a:	9c 91       	ld	r25, X
 b9c:	17 97       	sbiw	r26, 0x07	; 7
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	17 96       	adiw	r26, 0x07	; 7
 ba2:	9c 93       	st	X, r25
 ba4:	8e 93       	st	-X, r24
 ba6:	16 97       	sbiw	r26, 0x06	; 6
 ba8:	ce 01       	movw	r24, r28
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	08 95       	ret

00000bb4 <__ultoa_invert>:
 bb4:	fa 01       	movw	r30, r20
 bb6:	aa 27       	eor	r26, r26
 bb8:	28 30       	cpi	r18, 0x08	; 8
 bba:	51 f1       	breq	.+84     	; 0xc10 <__ultoa_invert+0x5c>
 bbc:	20 31       	cpi	r18, 0x10	; 16
 bbe:	81 f1       	breq	.+96     	; 0xc20 <__ultoa_invert+0x6c>
 bc0:	e8 94       	clt
 bc2:	6f 93       	push	r22
 bc4:	6e 7f       	andi	r22, 0xFE	; 254
 bc6:	6e 5f       	subi	r22, 0xFE	; 254
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	af 4f       	sbci	r26, 0xFF	; 255
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0x9c>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	3c d0       	rcall	.+120    	; 0xc50 <__ultoa_invert+0x9c>
 bd8:	67 0f       	add	r22, r23
 bda:	78 1f       	adc	r23, r24
 bdc:	89 1f       	adc	r24, r25
 bde:	9a 1f       	adc	r25, r26
 be0:	a1 1d       	adc	r26, r1
 be2:	68 0f       	add	r22, r24
 be4:	79 1f       	adc	r23, r25
 be6:	8a 1f       	adc	r24, r26
 be8:	91 1d       	adc	r25, r1
 bea:	a1 1d       	adc	r26, r1
 bec:	6a 0f       	add	r22, r26
 bee:	71 1d       	adc	r23, r1
 bf0:	81 1d       	adc	r24, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	20 d0       	rcall	.+64     	; 0xc38 <__ultoa_invert+0x84>
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__ultoa_invert+0x48>
 bfa:	68 94       	set
 bfc:	3f 91       	pop	r19
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	26 9f       	mul	r18, r22
 c02:	11 24       	eor	r1, r1
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	de f6       	brtc	.-74     	; 0xbc2 <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x86>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x5c>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x58>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x7c>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x84>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x6c>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x58>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x86>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa2>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <__prologue_saves__>:
 c70:	2f 92       	push	r2
 c72:	3f 92       	push	r3
 c74:	4f 92       	push	r4
 c76:	5f 92       	push	r5
 c78:	6f 92       	push	r6
 c7a:	7f 92       	push	r7
 c7c:	8f 92       	push	r8
 c7e:	9f 92       	push	r9
 c80:	af 92       	push	r10
 c82:	bf 92       	push	r11
 c84:	cf 92       	push	r12
 c86:	df 92       	push	r13
 c88:	ef 92       	push	r14
 c8a:	ff 92       	push	r15
 c8c:	0f 93       	push	r16
 c8e:	1f 93       	push	r17
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	ca 1b       	sub	r28, r26
 c9a:	db 0b       	sbc	r29, r27
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	09 94       	ijmp

00000ca8 <__epilogue_restores__>:
 ca8:	2a 88       	ldd	r2, Y+18	; 0x12
 caa:	39 88       	ldd	r3, Y+17	; 0x11
 cac:	48 88       	ldd	r4, Y+16	; 0x10
 cae:	5f 84       	ldd	r5, Y+15	; 0x0f
 cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cba:	b9 84       	ldd	r11, Y+9	; 0x09
 cbc:	c8 84       	ldd	r12, Y+8	; 0x08
 cbe:	df 80       	ldd	r13, Y+7	; 0x07
 cc0:	ee 80       	ldd	r14, Y+6	; 0x06
 cc2:	fd 80       	ldd	r15, Y+5	; 0x05
 cc4:	0c 81       	ldd	r16, Y+4	; 0x04
 cc6:	1b 81       	ldd	r17, Y+3	; 0x03
 cc8:	aa 81       	ldd	r26, Y+2	; 0x02
 cca:	b9 81       	ldd	r27, Y+1	; 0x01
 ccc:	ce 0f       	add	r28, r30
 cce:	d1 1d       	adc	r29, r1
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	ed 01       	movw	r28, r26
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
